---
apiVersion: v1
kind: Service
metadata:
  name: geoserver
spec:
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
  type: NodePort
  selector:
    app: geoserver
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: geoserver
spec:
  selector:
    matchLabels:
      app: geoserver
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: geoserver
    spec:
      containers:
      - name: geoserver
        image: kartoza/geoserver
        resources:
          requests:
            memory: "8Gi"
            cpu: 4
        ports:
          - containerPort: 8080
        env:
          #- name: DATA_DIR
          #  value: /var/lib/geoserver_data
          - name: DB_BACKEND
            value: POSTGRES
          - name: HOST
            value: "postgis.default.svc.cluster.local"
          - name: POSTGRES_PORT
            value: "5432"
          - name: POSTGRES_DB
            value: geoserver
          - name: POSTGRES_USER
            value: postgres
          - name: POSTGRES_PASS
            value: postgres
          - name: GEOSERVER_CSRF_WHITELIST
            value: "geoserver.acrossthecloud.net"
          - name: HTTP_SCHEME
            value: https
        volumeMounts:
        - mountPath: /var/lib/geoserver_data
          name: geoserver
      volumes:
      - name: geoserver
        persistentVolumeClaim:
          claimName: efs-claim
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: ingress-geoserver
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-southeast-2:455563481328:certificate/1b6852db-0195-400f-a7b4-69ac932a6b74
spec:
  rules:
    - http:
        paths:
          - path: /*
            backend:
              serviceName: geoserver
              servicePort: 8080